<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorNotCallable" xml:space="preserve">
    <value>'{0}' may not be callable</value>
  </data>
  <data name="ErrorNotCallableEmpty" xml:space="preserve">
    <value>object may not be callable</value>
  </data>
  <data name="ErrorUnresolvedImport" xml:space="preserve">
    <value>unresolved import '{0}'</value>
  </data>
  <data name="ErrorRelativeImportBeyondTopLevel" xml:space="preserve">
    <value>Relative import '{0}' beyond top-level package</value>
  </data>
  <data name="ErrorUseBeforeDef" xml:space="preserve">
    <value>'{0}' used before definition</value>
  </data>
  <data name="PropertyOfType" xml:space="preserve">
    <value>property of type {0}</value>
  </data>
  <data name="PropertyOfUnknownType" xml:space="preserve">
    <value>property of unknown type</value>
  </data>
  <data name="Analysis_ParameterAlreadySpecified" xml:space="preserve">
    <value>Parameter {0} already specified.</value>
  </data>
  <data name="Analysis_ParameterMissing" xml:space="preserve">
    <value>Parameter {0} is missing.</value>
  </data>
  <data name="Analysis_PositionalArgumentAfterKeyword" xml:space="preserve">
    <value>Positional arguments are not allowed after keyword argument.</value>
  </data>
  <data name="Analysis_TooManyFunctionArguments" xml:space="preserve">
    <value>Too many function arguments.</value>
  </data>
  <data name="Analysis_TooManyPositionalArgumentBeforeStar" xml:space="preserve">
    <value>Too many positional arguments before '*' argument.</value>
  </data>
  <data name="Analysis_UnknownParameterName" xml:space="preserve">
    <value>Unknown parameter name.</value>
  </data>
  <data name="AnalysisProgress" xml:space="preserve">
    <value>Analyzing in background, {0} items left...</value>
  </data>
  <data name="UndefinedVariable" xml:space="preserve">
    <value>Undefined variable: '{0}'</value>
  </data>
  <data name="ErrorVariableNotDefinedGlobally" xml:space="preserve">
    <value>'{0}' is not defined in the global scope</value>
  </data>
  <data name="ErrorVariableNotDefinedNonLocal" xml:space="preserve">
    <value>'{0}' is not defined in non-local scopes</value>
  </data>
  <data name="ExceptionGettingSearchPaths" xml:space="preserve">
    <value>An exception occured while discovering search paths; analysis will not be available.</value>
  </data>
  <data name="InterpreterNotFound" xml:space="preserve">
    <value>Interpreter does not exist; analysis will not be available.</value>
  </data>
  <data name="AnalysisCachePath" xml:space="preserve">
    <value>Analysis cache path: {0}</value>
  </data>
  <data name="EnvVariableNotSet" xml:space="preserve">
    <value>Environment variable '{0}' is not set, using the default cache location instead.</value>
  </data>
  <data name="EnvVariablePathNotRooted" xml:space="preserve">
    <value>Path '{0}' is not rooted, using the default cache location instead.</value>
  </data>
  <data name="UnableToDetermineCachePath" xml:space="preserve">
    <value>Unable to determine analysis cache path. Using default '{0}'.</value>
  </data>
  <data name="UnableToDetermineCachePathException" xml:space="preserve">
    <value>Unable to determine analysis cache path. Exception: {0}. Using default '{1}'.</value>
  </data>
  <data name="TypeVarFirstArgumentNotString" xml:space="preserve">
    <value>The first argument to TypeVar must be a string.</value>
  </data>
  <data name="TypeVarSingleConstraint" xml:space="preserve">
    <value>A single constraint to TypeVar is not allowed.</value>
  </data>
  <data name="NewTypeFirstArgNotString" xml:space="preserve">
    <value>The first argument to NewType must be a string, but it is of type '{0}'.</value>
  </data>
  <data name="ReturnInInit" xml:space="preserve">
    <value>Explicit return in __init__ </value>
  </data>
  <data name="GenericNotAllTypeParameters" xml:space="preserve">
    <value>Arguments to Generic must all be type parameters.</value>
  </data>
  <data name="GenericNotAllUnique" xml:space="preserve">
    <value>Arguments to Generic must all be unique.</value>
  </data>
  <data name="InheritNonClass" xml:space="preserve">
    <value>Inheriting '{0}', which is not a class.</value>
  </data>
</root>
