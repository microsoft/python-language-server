{
  "UniqueId": "re(3.7)",
  "Documentation": "\r\nThis module provides regular expression matching operations similar to\r\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\r\nthe pattern and the strings being processed can contain null bytes and\r\ncharacters outside the US ASCII range.\r\n\r\nRegular expressions can contain both special and ordinary characters.\r\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\r\nregular expressions; they simply match themselves.  You can\r\nconcatenate ordinary characters, so last matches the string 'last'.\r\n\r\nThe special characters are:\r\n    \".\"      Matches any character except a newline.\r\n    \"^\"      Matches the start of the string.\r\n    \"$\"      Matches the end of the string or just before the newline at\r\n             the end of the string.\r\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\r\n             Greedy means that it will match as many repetitions as possible.\r\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\r\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\r\n    *?,+?,?? Non-greedy versions of the previous three special characters.\r\n    {m,n}    Matches from m to n repetitions of the preceding RE.\r\n    {m,n}?   Non-greedy version of the above.\r\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\r\n    []       Indicates a set of characters.\r\n             A \"^\" as the first character indicates a complementing set.\r\n    \"|\"      A|B, creates an RE that will match either A or B.\r\n    (...)    Matches the RE inside the parentheses.\r\n             The contents can be retrieved or matched later in the string.\r\n    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\r\n    (?:...)  Non-grouping version of regular parentheses.\r\n    (?P<name>...) The substring matched by the group is accessible by name.\r\n    (?P=name)     Matches the text matched earlier by the group named name.\r\n    (?#...)  A comment; ignored.\r\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\r\n    (?!...)  Matches if ... doesn't match next.\r\n    (?<=...) Matches if preceded by ... (must be fixed length).\r\n    (?<!...) Matches if not preceded by ... (must be fixed length).\r\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\r\n                       the (optional) no pattern otherwise.\r\n\r\nThe special sequences consist of \"\\\\\" and a character from the list\r\nbelow.  If the ordinary character is not on the list, then the\r\nresulting RE will match the second character.\r\n    \\number  Matches the contents of the group of the same number.\r\n    \\A       Matches only at the start of the string.\r\n    \\Z       Matches only at the end of the string.\r\n    \\b       Matches the empty string, but only at the start or end of a word.\r\n    \\B       Matches the empty string, but not at the start or end of a word.\r\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\r\n             bytes patterns or string patterns with the ASCII flag.\r\n             In string patterns without the ASCII flag, it will match the whole\r\n             range of Unicode digits.\r\n    \\D       Matches any non-digit character; equivalent to [^\\d].\r\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\r\n             bytes patterns or string patterns with the ASCII flag.\r\n             In string patterns without the ASCII flag, it will match the whole\r\n             range of Unicode whitespace characters.\r\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\r\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\r\n             in bytes patterns or string patterns with the ASCII flag.\r\n             In string patterns without the ASCII flag, it will match the\r\n             range of Unicode alphanumeric characters (letters plus digits\r\n             plus underscore).\r\n             With LOCALE, it will match the set [0-9_] plus characters defined\r\n             as letters for the current locale.\r\n    \\W       Matches the complement of \\w.\r\n    \\\\       Matches a literal backslash.\r\n\r\nThis module exports the following functions:\r\n    match     Match a regular expression pattern to the beginning of a string.\r\n    fullmatch Match a regular expression pattern to all of a string.\r\n    search    Search a string for the presence of a pattern.\r\n    sub       Substitute occurrences of a pattern found in a string.\r\n    subn      Same as sub, but also return the number of substitutions made.\r\n    split     Split a string by the occurrences of a pattern.\r\n    findall   Find all occurrences of a pattern in a string.\r\n    finditer  Return an iterator yielding a Match object for each match.\r\n    compile   Compile a pattern into a Pattern object.\r\n    purge     Clear the regular expression cache.\r\n    escape    Backslash all non-alphanumerics in a string.\r\n\r\nSome of the functions in this module takes flags as optional parameters:\r\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\r\n                   match the corresponding ASCII character categories\r\n                   (rather than the whole Unicode categories, which is the\r\n                   default).\r\n                   For bytes patterns, this flag is the only available\r\n                   behaviour and needn't be specified.\r\n    I  IGNORECASE  Perform case-insensitive matching.\r\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\r\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\r\n                   as well as the string.\r\n                   \"$\" matches the end of lines (before a newline) as well\r\n                   as the end of the string.\r\n    S  DOTALL      \".\" matches any character at all, including the newline.\r\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\r\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\r\n                   is the default), and forbidden for bytes patterns.\r\n\r\nThis module also defines an exception 'error'.\r\n\r\n",
  "Functions": [
    {
      "Documentation": "Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 762138638,
      "Name": "match",
      "IndexSpan": {
        "Start": 8157,
        "Length": 5
      }
    },
    {
      "Documentation": "Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": -1889459617,
      "Name": "fullmatch",
      "IndexSpan": {
        "Start": 8374,
        "Length": 9
      }
    },
    {
      "Documentation": "Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": -1968588673,
      "Name": "search",
      "IndexSpan": {
        "Start": 8593,
        "Length": 6
      }
    },
    {
      "Documentation": "Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 799433,
      "Name": "sub",
      "IndexSpan": {
        "Start": 8815,
        "Length": 3
      }
    },
    {
      "Documentation": "Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:Tuple[typing:AnyStr, int]"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:Tuple[typing:AnyStr, int]"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:Tuple[typing:AnyStr, int]"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "repl",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "count",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:Tuple[typing:AnyStr, int]"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 24782533,
      "Name": "subn",
      "IndexSpan": {
        "Start": 9293,
        "Length": 4
      }
    },
    {
      "Documentation": "Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "maxsplit",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:List[typing:AnyStr]"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "maxsplit",
              "Type": "t:int",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:List[typing:AnyStr]"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 768119139,
      "Name": "split",
      "IndexSpan": {
        "Start": 9904,
        "Length": 5
      }
    },
    {
      "Documentation": "Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:List[typing:Any]"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:List[typing:Any]"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 576750929,
      "Name": "findall",
      "IndexSpan": {
        "Start": 10444,
        "Length": 7
      }
    },
    {
      "Documentation": "Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n\n    Empty matches are included in the result.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:list_iterator"
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": "i:list_iterator"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 699655528,
      "Name": "finditer",
      "IndexSpan": {
        "Start": 10831,
        "Length": 8
      }
    },
    {
      "Documentation": "Compile a regular expression pattern, returning a Pattern object.",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        },
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": -1914543556,
      "Name": "compile",
      "IndexSpan": {
        "Start": 11114,
        "Length": 7
      }
    },
    {
      "Documentation": "Clear the regular expression caches",
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 765503220,
      "Name": "purge",
      "IndexSpan": {
        "Start": 11258,
        "Length": 5
      }
    },
    {
      "Documentation": "Compile a template pattern, returning a Pattern object",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": "t:typing:Union[typing:AnyStr, Unknown]",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": "t:typing:Union[int, re:RegexFlag]",
              "DefaultValue": "i:ellipsis",
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 56673681,
      "Name": "template",
      "IndexSpan": {
        "Start": 11370,
        "Length": 8
      }
    },
    {
      "Documentation": "\n    Escape special characters in a string.\n    ",
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "string",
              "Type": "t:typing:AnyStr",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 1938543448,
      "Name": "escape",
      "IndexSpan": {
        "Start": 11778,
        "Length": 6
      }
    },
    {
      "Documentation": null,
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "flags",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:dict"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": 391969291,
      "Name": "_compile",
      "IndexSpan": {
        "Start": 12305,
        "Length": 8
      }
    },
    {
      "Documentation": null,
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "repl",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing:Tuple[typing:List[typing:Tuple[int, int]], typing:List[str]]"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": -706434781,
      "Name": "_compile_repl",
      "IndexSpan": {
        "Start": 13240,
        "Length": 13
      }
    },
    {
      "Documentation": null,
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "match",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "template",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": -1445731390,
      "Name": "_expand",
      "IndexSpan": {
        "Start": 13374,
        "Length": 7
      }
    },
    {
      "Documentation": null,
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "pattern",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "template",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "t:typing:Union[str, re:_subx.filter]"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [
        {
          "Documentation": null,
          "Overloads": [
            {
              "Parameters": [
                {
                  "Name": "match",
                  "Type": null,
                  "DefaultValue": null,
                  "Kind": 0
                },
                {
                  "Name": "template",
                  "Type": "t:typing:Tuple[typing:List[typing:Tuple[int, int]], typing:List[str]]",
                  "DefaultValue": "i:typing:Tuple[typing:List[typing:Tuple[int, int]], typing:List[str]]",
                  "Kind": 0
                }
              ],
              "ReturnType": "i:str"
            }
          ],
          "Attributes": 0,
          "Classes": [],
          "Functions": [],
          "Id": 1958223439,
          "Name": "filter",
          "IndexSpan": {
            "Start": 13834,
            "Length": 6
          }
        }
      ],
      "Id": 749746528,
      "Name": "_subx",
      "IndexSpan": {
        "Start": 13581,
        "Length": 5
      }
    },
    {
      "Documentation": null,
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "p",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:tuple"
        }
      ],
      "Attributes": 0,
      "Classes": [],
      "Functions": [],
      "Id": -1145041278,
      "Name": "_pickle",
      "IndexSpan": {
        "Start": 14005,
        "Length": 7
      }
    }
  ],
  "Variables": [
    {
      "Value": "p:enum",
      "Id": 24359320,
      "Name": "enum",
      "IndexSpan": {
        "Start": 6624,
        "Length": 4
      }
    },
    {
      "Value": "p:sre_compile",
      "Id": -1600301981,
      "Name": "sre_compile",
      "IndexSpan": {
        "Start": 6637,
        "Length": 11
      }
    },
    {
      "Value": "p:sre_parse",
      "Id": 1457971427,
      "Name": "sre_parse",
      "IndexSpan": {
        "Start": 6657,
        "Length": 9
      }
    },
    {
      "Value": "p:functools",
      "Id": -365237408,
      "Name": "functools",
      "IndexSpan": {
        "Start": 6675,
        "Length": 9
      }
    },
    {
      "Value": "i:NoneType",
      "Id": -1254026366,
      "Name": "_locale",
      "IndexSpan": {
        "Start": 6703,
        "Length": 7
      }
    },
    {
      "Value": "i:list",
      "Id": -1638856342,
      "Name": "__all__",
      "IndexSpan": {
        "Start": 6775,
        "Length": 7
      }
    },
    {
      "Value": "i:str",
      "Id": 1161199201,
      "Name": "__version__",
      "IndexSpan": {
        "Start": 7081,
        "Length": 11
      }
    },
    {
      "Value": "t:sre_constants:error",
      "Id": 755255377,
      "Name": "error",
      "IndexSpan": {
        "Start": 8030,
        "Length": 5
      }
    },
    {
      "Value": "i:dict",
      "Id": -1192718388,
      "Name": "_special_chars_map",
      "IndexSpan": {
        "Start": 11688,
        "Length": 18
      }
    },
    {
      "Value": null,
      "Id": -1991472263,
      "Name": "Pattern",
      "IndexSpan": {
        "Start": 12072,
        "Length": 7
      }
    },
    {
      "Value": null,
      "Id": 732585966,
      "Name": "Match",
      "IndexSpan": {
        "Start": 12116,
        "Length": 5
      }
    },
    {
      "Value": "i:dict",
      "Id": 1751934298,
      "Name": "_cache",
      "IndexSpan": {
        "Start": 12257,
        "Length": 6
      }
    },
    {
      "Value": "i:int",
      "Id": 1059525574,
      "Name": "_MAXCACHE",
      "IndexSpan": {
        "Start": 12284,
        "Length": 9
      }
    },
    {
      "Value": "p:copyreg",
      "Id": -1911496440,
      "Name": "copyreg",
      "IndexSpan": {
        "Start": 13990,
        "Length": 7
      }
    },
    {
      "Value": "i:int",
      "Id": 778,
      "Name": "A",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 721038714,
      "Name": "ASCII",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 723391612,
      "Name": "DEBUG",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 786,
      "Name": "I",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": -1309066407,
      "Name": "IGNORECASE",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 789,
      "Name": "L",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 1188582705,
      "Name": "LOCALE",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 790,
      "Name": "M",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 1355512406,
      "Name": "MULTILINE",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 796,
      "Name": "S",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 960055951,
      "Name": "DOTALL",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 801,
      "Name": "X",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": -1795945109,
      "Name": "VERBOSE",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 798,
      "Name": "U",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 1860898502,
      "Name": "UNICODE",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 797,
      "Name": "T",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "i:int",
      "Id": 839300497,
      "Name": "TEMPLATE",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    },
    {
      "Value": "t:typing:Union[int, re:RegexFlag]",
      "Id": 654213145,
      "Name": "_FlagsType",
      "IndexSpan": {
        "Start": 0,
        "Length": 0
      }
    }
  ],
  "Classes": [
    {
      "Documentation": "Support for integer-based Flags",
      "Bases": [
        "t:enum:IntFlag",
        "t:object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [
        {
          "Value": "i:int",
          "Id": 721038714,
          "Name": "ASCII",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": -1309066407,
          "Name": "IGNORECASE",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 1188582705,
          "Name": "LOCALE",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 1860898502,
          "Name": "UNICODE",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 1355512406,
          "Name": "MULTILINE",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 960055951,
          "Name": "DOTALL",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": -1795945109,
          "Name": "VERBOSE",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 778,
          "Name": "A",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 786,
          "Name": "I",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 789,
          "Name": "L",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 798,
          "Name": "U",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 790,
          "Name": "M",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 796,
          "Name": "S",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 801,
          "Name": "X",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 839300497,
          "Name": "TEMPLATE",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 797,
          "Name": "T",
          "IndexSpan": null
        },
        {
          "Value": "i:int",
          "Id": 723391612,
          "Name": "DEBUG",
          "IndexSpan": null
        },
        {
          "Value": "i:typing:Any",
          "Id": 770443194,
          "Name": "value",
          "IndexSpan": null
        }
      ],
      "GenericParameters": null,
      "InnerClasses": [],
      "Id": 1746088444,
      "Name": "RegexFlag",
      "IndexSpan": {
        "Start": 7112,
        "Length": 9
      }
    },
    {
      "Documentation": null,
      "Bases": [
        "t:object"
      ],
      "Methods": [
        {
          "Documentation": null,
          "Overloads": [
            {
              "Parameters": [
                {
                  "Name": "self",
                  "Type": "t:re:Scanner",
                  "DefaultValue": null,
                  "Kind": 0
                },
                {
                  "Name": "lexicon",
                  "Type": null,
                  "DefaultValue": null,
                  "Kind": 0
                },
                {
                  "Name": "flags",
                  "Type": "t:int",
                  "DefaultValue": "i:int",
                  "Kind": 0
                }
              ],
              "ReturnType": null
            }
          ],
          "Attributes": 0,
          "Classes": [],
          "Functions": [],
          "Id": 965872103,
          "Name": "__init__",
          "IndexSpan": {
            "Start": 14270,
            "Length": 8
          }
        },
        {
          "Documentation": null,
          "Overloads": [
            {
              "Parameters": [
                {
                  "Name": "self",
                  "Type": "t:re:Scanner",
                  "DefaultValue": null,
                  "Kind": 0
                },
                {
                  "Name": "string",
                  "Type": null,
                  "DefaultValue": null,
                  "Kind": 0
                }
              ],
              "ReturnType": "i:tuple"
            }
          ],
          "Attributes": 0,
          "Classes": [],
          "Functions": [],
          "Id": 24765204,
          "Name": "scan",
          "IndexSpan": {
            "Start": 14962,
            "Length": 4
          }
        }
      ],
      "Properties": [],
      "Fields": [
        {
          "Value": null,
          "Id": 1501675297,
          "Name": "lexicon",
          "IndexSpan": null
        },
        {
          "Value": null,
          "Id": -954073593,
          "Name": "scanner",
          "IndexSpan": {
            "Start": 0,
            "Length": 0
          }
        },
        {
          "Value": null,
          "Id": 762138638,
          "Name": "match",
          "IndexSpan": null
        }
      ],
      "GenericParameters": null,
      "InnerClasses": [],
      "Id": 710579687,
      "Name": "Scanner",
      "IndexSpan": {
        "Start": 14252,
        "Length": 7
      }
    }
  ],
  "NewLines": [
    {
      "EndIndex": 3,
      "Kind": 3
    },
    {
      "EndIndex": 45,
      "Kind": 3
    },
    {
      "EndIndex": 48,
      "Kind": 3
    },
    {
      "EndIndex": 103,
      "Kind": 3
    },
    {
      "EndIndex": 106,
      "Kind": 3
    },
    {
      "EndIndex": 174,
      "Kind": 3
    },
    {
      "EndIndex": 177,
      "Kind": 3
    },
    {
      "EndIndex": 246,
      "Kind": 3
    },
    {
      "EndIndex": 316,
      "Kind": 3
    },
    {
      "EndIndex": 345,
      "Kind": 3
    },
    {
      "EndIndex": 348,
      "Kind": 3
    },
    {
      "EndIndex": 415,
      "Kind": 3
    },
    {
      "EndIndex": 482,
      "Kind": 3
    },
    {
      "EndIndex": 511,
      "Kind": 3
    },
    {
      "EndIndex": 514,
      "Kind": 3
    },
    {
      "EndIndex": 516,
      "Kind": 3
    },
    {
      "EndIndex": 559,
      "Kind": 3
    },
    {
      "EndIndex": 561,
      "Kind": 3
    },
    {
      "EndIndex": 633,
      "Kind": 3
    },
    {
      "EndIndex": 705,
      "Kind": 3
    },
    {
      "EndIndex": 777,
      "Kind": 3
    },
    {
      "EndIndex": 817,
      "Kind": 3
    },
    {
      "EndIndex": 819,
      "Kind": 3
    },
    {
      "EndIndex": 890,
      "Kind": 3
    },
    {
      "EndIndex": 957,
      "Kind": 3
    },
    {
      "EndIndex": 1018,
      "Kind": 3
    },
    {
      "EndIndex": 1087,
      "Kind": 3
    },
    {
      "EndIndex": 1089,
      "Kind": 3
    },
    {
      "EndIndex": 1118,
      "Kind": 3
    },
    {
      "EndIndex": 1172,
      "Kind": 3
    },
    {
      "EndIndex": 1219,
      "Kind": 3
    },
    {
      "EndIndex": 1293,
      "Kind": 3
    },
    {
      "EndIndex": 1330,
      "Kind": 3
    },
    {
      "EndIndex": 1404,
      "Kind": 3
    },
    {
      "EndIndex": 1483,
      "Kind": 3
    },
    {
      "EndIndex": 1557,
      "Kind": 3
    },
    {
      "EndIndex": 1616,
      "Kind": 3
    },
    {
      "EndIndex": 1692,
      "Kind": 3
    },
    {
      "EndIndex": 1759,
      "Kind": 3
    },
    {
      "EndIndex": 1806,
      "Kind": 3
    },
    {
      "EndIndex": 1885,
      "Kind": 3
    },
    {
      "EndIndex": 1930,
      "Kind": 3
    },
    {
      "EndIndex": 2004,
      "Kind": 3
    },
    {
      "EndIndex": 2068,
      "Kind": 3
    },
    {
      "EndIndex": 2121,
      "Kind": 3
    },
    {
      "EndIndex": 2197,
      "Kind": 3
    },
    {
      "EndIndex": 2273,
      "Kind": 3
    },
    {
      "EndIndex": 2332,
      "Kind": 3
    },
    {
      "EndIndex": 2409,
      "Kind": 3
    },
    {
      "EndIndex": 2486,
      "Kind": 3
    },
    {
      "EndIndex": 2520,
      "Kind": 3
    },
    {
      "EndIndex": 2595,
      "Kind": 3
    },
    {
      "EndIndex": 2644,
      "Kind": 3
    },
    {
      "EndIndex": 2709,
      "Kind": 3
    },
    {
      "EndIndex": 2778,
      "Kind": 3
    },
    {
      "EndIndex": 2857,
      "Kind": 3
    },
    {
      "EndIndex": 2918,
      "Kind": 3
    },
    {
      "EndIndex": 2920,
      "Kind": 3
    },
    {
      "EndIndex": 2989,
      "Kind": 3
    },
    {
      "EndIndex": 3053,
      "Kind": 3
    },
    {
      "EndIndex": 3100,
      "Kind": 3
    },
    {
      "EndIndex": 3168,
      "Kind": 3
    },
    {
      "EndIndex": 3223,
      "Kind": 3
    },
    {
      "EndIndex": 3276,
      "Kind": 3
    },
    {
      "EndIndex": 3356,
      "Kind": 3
    },
    {
      "EndIndex": 3435,
      "Kind": 3
    },
    {
      "EndIndex": 3507,
      "Kind": 3
    },
    {
      "EndIndex": 3576,
      "Kind": 3
    },
    {
      "EndIndex": 3657,
      "Kind": 3
    },
    {
      "EndIndex": 3696,
      "Kind": 3
    },
    {
      "EndIndex": 3764,
      "Kind": 3
    },
    {
      "EndIndex": 3843,
      "Kind": 3
    },
    {
      "EndIndex": 3912,
      "Kind": 3
    },
    {
      "EndIndex": 3993,
      "Kind": 3
    },
    {
      "EndIndex": 4047,
      "Kind": 3
    },
    {
      "EndIndex": 4120,
      "Kind": 3
    },
    {
      "EndIndex": 4197,
      "Kind": 3
    },
    {
      "EndIndex": 4269,
      "Kind": 3
    },
    {
      "EndIndex": 4344,
      "Kind": 3
    },
    {
      "EndIndex": 4420,
      "Kind": 3
    },
    {
      "EndIndex": 4452,
      "Kind": 3
    },
    {
      "EndIndex": 4532,
      "Kind": 3
    },
    {
      "EndIndex": 4581,
      "Kind": 3
    },
    {
      "EndIndex": 4625,
      "Kind": 3
    },
    {
      "EndIndex": 4668,
      "Kind": 3
    },
    {
      "EndIndex": 4670,
      "Kind": 3
    },
    {
      "EndIndex": 4716,
      "Kind": 3
    },
    {
      "EndIndex": 4796,
      "Kind": 3
    },
    {
      "EndIndex": 4866,
      "Kind": 3
    },
    {
      "EndIndex": 4928,
      "Kind": 3
    },
    {
      "EndIndex": 4998,
      "Kind": 3
    },
    {
      "EndIndex": 5076,
      "Kind": 3
    },
    {
      "EndIndex": 5139,
      "Kind": 3
    },
    {
      "EndIndex": 5201,
      "Kind": 3
    },
    {
      "EndIndex": 5275,
      "Kind": 3
    },
    {
      "EndIndex": 5331,
      "Kind": 3
    },
    {
      "EndIndex": 5382,
      "Kind": 3
    },
    {
      "EndIndex": 5442,
      "Kind": 3
    },
    {
      "EndIndex": 5444,
      "Kind": 3
    },
    {
      "EndIndex": 5518,
      "Kind": 3
    },
    {
      "EndIndex": 5587,
      "Kind": 3
    },
    {
      "EndIndex": 5658,
      "Kind": 3
    },
    {
      "EndIndex": 5734,
      "Kind": 3
    },
    {
      "EndIndex": 5764,
      "Kind": 3
    },
    {
      "EndIndex": 5836,
      "Kind": 3
    },
    {
      "EndIndex": 5892,
      "Kind": 3
    },
    {
      "EndIndex": 5947,
      "Kind": 3
    },
    {
      "EndIndex": 6021,
      "Kind": 3
    },
    {
      "EndIndex": 6094,
      "Kind": 3
    },
    {
      "EndIndex": 6137,
      "Kind": 3
    },
    {
      "EndIndex": 6213,
      "Kind": 3
    },
    {
      "EndIndex": 6259,
      "Kind": 3
    },
    {
      "EndIndex": 6336,
      "Kind": 3
    },
    {
      "EndIndex": 6411,
      "Kind": 3
    },
    {
      "EndIndex": 6487,
      "Kind": 3
    },
    {
      "EndIndex": 6558,
      "Kind": 3
    },
    {
      "EndIndex": 6560,
      "Kind": 3
    },
    {
      "EndIndex": 6608,
      "Kind": 3
    },
    {
      "EndIndex": 6610,
      "Kind": 3
    },
    {
      "EndIndex": 6615,
      "Kind": 3
    },
    {
      "EndIndex": 6617,
      "Kind": 3
    },
    {
      "EndIndex": 6630,
      "Kind": 3
    },
    {
      "EndIndex": 6650,
      "Kind": 3
    },
    {
      "EndIndex": 6668,
      "Kind": 3
    },
    {
      "EndIndex": 6686,
      "Kind": 3
    },
    {
      "EndIndex": 6692,
      "Kind": 3
    },
    {
      "EndIndex": 6712,
      "Kind": 3
    },
    {
      "EndIndex": 6733,
      "Kind": 3
    },
    {
      "EndIndex": 6753,
      "Kind": 3
    },
    {
      "EndIndex": 6755,
      "Kind": 3
    },
    {
      "EndIndex": 6757,
      "Kind": 3
    },
    {
      "EndIndex": 6775,
      "Kind": 3
    },
    {
      "EndIndex": 6788,
      "Kind": 3
    },
    {
      "EndIndex": 6849,
      "Kind": 3
    },
    {
      "EndIndex": 6919,
      "Kind": 3
    },
    {
      "EndIndex": 6988,
      "Kind": 3
    },
    {
      "EndIndex": 7060,
      "Kind": 3
    },
    {
      "EndIndex": 7076,
      "Kind": 3
    },
    {
      "EndIndex": 7079,
      "Kind": 3
    },
    {
      "EndIndex": 7081,
      "Kind": 3
    },
    {
      "EndIndex": 7104,
      "Kind": 3
    },
    {
      "EndIndex": 7106,
      "Kind": 3
    },
    {
      "EndIndex": 7138,
      "Kind": 3
    },
    {
      "EndIndex": 7202,
      "Kind": 3
    },
    {
      "EndIndex": 7266,
      "Kind": 3
    },
    {
      "EndIndex": 7338,
      "Kind": 3
    },
    {
      "EndIndex": 7408,
      "Kind": 3
    },
    {
      "EndIndex": 7488,
      "Kind": 3
    },
    {
      "EndIndex": 7555,
      "Kind": 3
    },
    {
      "EndIndex": 7632,
      "Kind": 3
    },
    {
      "EndIndex": 7647,
      "Kind": 3
    },
    {
      "EndIndex": 7667,
      "Kind": 3
    },
    {
      "EndIndex": 7683,
      "Kind": 3
    },
    {
      "EndIndex": 7700,
      "Kind": 3
    },
    {
      "EndIndex": 7719,
      "Kind": 3
    },
    {
      "EndIndex": 7735,
      "Kind": 3
    },
    {
      "EndIndex": 7752,
      "Kind": 3
    },
    {
      "EndIndex": 7810,
      "Kind": 3
    },
    {
      "EndIndex": 7879,
      "Kind": 3
    },
    {
      "EndIndex": 7897,
      "Kind": 3
    },
    {
      "EndIndex": 7970,
      "Kind": 3
    },
    {
      "EndIndex": 8011,
      "Kind": 3
    },
    {
      "EndIndex": 8013,
      "Kind": 3
    },
    {
      "EndIndex": 8030,
      "Kind": 3
    },
    {
      "EndIndex": 8057,
      "Kind": 3
    },
    {
      "EndIndex": 8059,
      "Kind": 3
    },
    {
      "EndIndex": 8131,
      "Kind": 3
    },
    {
      "EndIndex": 8151,
      "Kind": 3
    },
    {
      "EndIndex": 8153,
      "Kind": 3
    },
    {
      "EndIndex": 8191,
      "Kind": 3
    },
    {
      "EndIndex": 8262,
      "Kind": 3
    },
    {
      "EndIndex": 8317,
      "Kind": 3
    },
    {
      "EndIndex": 8368,
      "Kind": 3
    },
    {
      "EndIndex": 8370,
      "Kind": 3
    },
    {
      "EndIndex": 8412,
      "Kind": 3
    },
    {
      "EndIndex": 8477,
      "Kind": 3
    },
    {
      "EndIndex": 8532,
      "Kind": 3
    },
    {
      "EndIndex": 8587,
      "Kind": 3
    },
    {
      "EndIndex": 8589,
      "Kind": 3
    },
    {
      "EndIndex": 8628,
      "Kind": 3
    },
    {
      "EndIndex": 8702,
      "Kind": 3
    },
    {
      "EndIndex": 8757,
      "Kind": 3
    },
    {
      "EndIndex": 8809,
      "Kind": 3
    },
    {
      "EndIndex": 8811,
      "Kind": 3
    },
    {
      "EndIndex": 8862,
      "Kind": 3
    },
    {
      "EndIndex": 8923,
      "Kind": 3
    },
    {
      "EndIndex": 8988,
      "Kind": 3
    },
    {
      "EndIndex": 9055,
      "Kind": 3
    },
    {
      "EndIndex": 9122,
      "Kind": 3
    },
    {
      "EndIndex": 9184,
      "Kind": 3
    },
    {
      "EndIndex": 9225,
      "Kind": 3
    },
    {
      "EndIndex": 9287,
      "Kind": 3
    },
    {
      "EndIndex": 9289,
      "Kind": 3
    },
    {
      "EndIndex": 9341,
      "Kind": 3
    },
    {
      "EndIndex": 9399,
      "Kind": 3
    },
    {
      "EndIndex": 9464,
      "Kind": 3
    },
    {
      "EndIndex": 9526,
      "Kind": 3
    },
    {
      "EndIndex": 9588,
      "Kind": 3
    },
    {
      "EndIndex": 9656,
      "Kind": 3
    },
    {
      "EndIndex": 9723,
      "Kind": 3
    },
    {
      "EndIndex": 9787,
      "Kind": 3
    },
    {
      "EndIndex": 9835,
      "Kind": 3
    },
    {
      "EndIndex": 9898,
      "Kind": 3
    },
    {
      "EndIndex": 9900,
      "Kind": 3
    },
    {
      "EndIndex": 9950,
      "Kind": 3
    },
    {
      "EndIndex": 10017,
      "Kind": 3
    },
    {
      "EndIndex": 10080,
      "Kind": 3
    },
    {
      "EndIndex": 10149,
      "Kind": 3
    },
    {
      "EndIndex": 10219,
      "Kind": 3
    },
    {
      "EndIndex": 10286,
      "Kind": 3
    },
    {
      "EndIndex": 10356,
      "Kind": 3
    },
    {
      "EndIndex": 10377,
      "Kind": 3
    },
    {
      "EndIndex": 10438,
      "Kind": 3
    },
    {
      "EndIndex": 10440,
      "Kind": 3
    },
    {
      "EndIndex": 10480,
      "Kind": 3
    },
    {
      "EndIndex": 10548,
      "Kind": 3
    },
    {
      "EndIndex": 10550,
      "Kind": 3
    },
    {
      "EndIndex": 10622,
      "Kind": 3
    },
    {
      "EndIndex": 10690,
      "Kind": 3
    },
    {
      "EndIndex": 10720,
      "Kind": 3
    },
    {
      "EndIndex": 10722,
      "Kind": 3
    },
    {
      "EndIndex": 10772,
      "Kind": 3
    },
    {
      "EndIndex": 10825,
      "Kind": 3
    },
    {
      "EndIndex": 10827,
      "Kind": 3
    },
    {
      "EndIndex": 10868,
      "Kind": 3
    },
    {
      "EndIndex": 10935,
      "Kind": 3
    },
    {
      "EndIndex": 11002,
      "Kind": 3
    },
    {
      "EndIndex": 11004,
      "Kind": 3
    },
    {
      "EndIndex": 11054,
      "Kind": 3
    },
    {
      "EndIndex": 11108,
      "Kind": 3
    },
    {
      "EndIndex": 11110,
      "Kind": 3
    },
    {
      "EndIndex": 11142,
      "Kind": 3
    },
    {
      "EndIndex": 11215,
      "Kind": 3
    },
    {
      "EndIndex": 11252,
      "Kind": 3
    },
    {
      "EndIndex": 11254,
      "Kind": 3
    },
    {
      "EndIndex": 11268,
      "Kind": 3
    },
    {
      "EndIndex": 11311,
      "Kind": 3
    },
    {
      "EndIndex": 11331,
      "Kind": 3
    },
    {
      "EndIndex": 11364,
      "Kind": 3
    },
    {
      "EndIndex": 11366,
      "Kind": 3
    },
    {
      "EndIndex": 11399,
      "Kind": 3
    },
    {
      "EndIndex": 11461,
      "Kind": 3
    },
    {
      "EndIndex": 11500,
      "Kind": 3
    },
    {
      "EndIndex": 11502,
      "Kind": 3
    },
    {
      "EndIndex": 11519,
      "Kind": 3
    },
    {
      "EndIndex": 11547,
      "Kind": 3
    },
    {
      "EndIndex": 11581,
      "Kind": 3
    },
    {
      "EndIndex": 11630,
      "Kind": 3
    },
    {
      "EndIndex": 11688,
      "Kind": 3
    },
    {
      "EndIndex": 11772,
      "Kind": 3
    },
    {
      "EndIndex": 11774,
      "Kind": 3
    },
    {
      "EndIndex": 11796,
      "Kind": 3
    },
    {
      "EndIndex": 11805,
      "Kind": 3
    },
    {
      "EndIndex": 11849,
      "Kind": 3
    },
    {
      "EndIndex": 11858,
      "Kind": 3
    },
    {
      "EndIndex": 11892,
      "Kind": 3
    },
    {
      "EndIndex": 11946,
      "Kind": 3
    },
    {
      "EndIndex": 11957,
      "Kind": 3
    },
    {
      "EndIndex": 11999,
      "Kind": 3
    },
    {
      "EndIndex": 12070,
      "Kind": 3
    },
    {
      "EndIndex": 12072,
      "Kind": 3
    },
    {
      "EndIndex": 12116,
      "Kind": 3
    },
    {
      "EndIndex": 12168,
      "Kind": 3
    },
    {
      "EndIndex": 12170,
      "Kind": 3
    },
    {
      "EndIndex": 12242,
      "Kind": 3
    },
    {
      "EndIndex": 12255,
      "Kind": 3
    },
    {
      "EndIndex": 12257,
      "Kind": 3
    },
    {
      "EndIndex": 12282,
      "Kind": 3
    },
    {
      "EndIndex": 12284,
      "Kind": 3
    },
    {
      "EndIndex": 12301,
      "Kind": 3
    },
    {
      "EndIndex": 12332,
      "Kind": 3
    },
    {
      "EndIndex": 12365,
      "Kind": 3
    },
    {
      "EndIndex": 12403,
      "Kind": 3
    },
    {
      "EndIndex": 12432,
      "Kind": 3
    },
    {
      "EndIndex": 12442,
      "Kind": 3
    },
    {
      "EndIndex": 12496,
      "Kind": 3
    },
    {
      "EndIndex": 12518,
      "Kind": 3
    },
    {
      "EndIndex": 12532,
      "Kind": 3
    },
    {
      "EndIndex": 12570,
      "Kind": 3
    },
    {
      "EndIndex": 12589,
      "Kind": 3
    },
    {
      "EndIndex": 12620,
      "Kind": 3
    },
    {
      "EndIndex": 12694,
      "Kind": 3
    },
    {
      "EndIndex": 12718,
      "Kind": 3
    },
    {
      "EndIndex": 12761,
      "Kind": 3
    },
    {
      "EndIndex": 12839,
      "Kind": 3
    },
    {
      "EndIndex": 12884,
      "Kind": 3
    },
    {
      "EndIndex": 12913,
      "Kind": 3
    },
    {
      "EndIndex": 12951,
      "Kind": 3
    },
    {
      "EndIndex": 12987,
      "Kind": 3
    },
    {
      "EndIndex": 13005,
      "Kind": 3
    },
    {
      "EndIndex": 13053,
      "Kind": 3
    },
    {
      "EndIndex": 13114,
      "Kind": 3
    },
    {
      "EndIndex": 13136,
      "Kind": 3
    },
    {
      "EndIndex": 13187,
      "Kind": 3
    },
    {
      "EndIndex": 13201,
      "Kind": 3
    },
    {
      "EndIndex": 13203,
      "Kind": 3
    },
    {
      "EndIndex": 13236,
      "Kind": 3
    },
    {
      "EndIndex": 13271,
      "Kind": 3
    },
    {
      "EndIndex": 13316,
      "Kind": 3
    },
    {
      "EndIndex": 13368,
      "Kind": 3
    },
    {
      "EndIndex": 13370,
      "Kind": 3
    },
    {
      "EndIndex": 13410,
      "Kind": 3
    },
    {
      "EndIndex": 13460,
      "Kind": 3
    },
    {
      "EndIndex": 13520,
      "Kind": 3
    },
    {
      "EndIndex": 13575,
      "Kind": 3
    },
    {
      "EndIndex": 13577,
      "Kind": 3
    },
    {
      "EndIndex": 13608,
      "Kind": 3
    },
    {
      "EndIndex": 13664,
      "Kind": 3
    },
    {
      "EndIndex": 13713,
      "Kind": 3
    },
    {
      "EndIndex": 13764,
      "Kind": 3
    },
    {
      "EndIndex": 13795,
      "Kind": 3
    },
    {
      "EndIndex": 13826,
      "Kind": 3
    },
    {
      "EndIndex": 13869,
      "Kind": 3
    },
    {
      "EndIndex": 13928,
      "Kind": 3
    },
    {
      "EndIndex": 13947,
      "Kind": 3
    },
    {
      "EndIndex": 13949,
      "Kind": 3
    },
    {
      "EndIndex": 13981,
      "Kind": 3
    },
    {
      "EndIndex": 13983,
      "Kind": 3
    },
    {
      "EndIndex": 13999,
      "Kind": 3
    },
    {
      "EndIndex": 14001,
      "Kind": 3
    },
    {
      "EndIndex": 14018,
      "Kind": 3
    },
    {
      "EndIndex": 14061,
      "Kind": 3
    },
    {
      "EndIndex": 14063,
      "Kind": 3
    },
    {
      "EndIndex": 14107,
      "Kind": 3
    },
    {
      "EndIndex": 14109,
      "Kind": 3
    },
    {
      "EndIndex": 14181,
      "Kind": 3
    },
    {
      "EndIndex": 14244,
      "Kind": 3
    },
    {
      "EndIndex": 14246,
      "Kind": 3
    },
    {
      "EndIndex": 14262,
      "Kind": 3
    },
    {
      "EndIndex": 14305,
      "Kind": 3
    },
    {
      "EndIndex": 14359,
      "Kind": 3
    },
    {
      "EndIndex": 14401,
      "Kind": 3
    },
    {
      "EndIndex": 14434,
      "Kind": 3
    },
    {
      "EndIndex": 14466,
      "Kind": 3
    },
    {
      "EndIndex": 14517,
      "Kind": 3
    },
    {
      "EndIndex": 14533,
      "Kind": 3
    },
    {
      "EndIndex": 14566,
      "Kind": 3
    },
    {
      "EndIndex": 14591,
      "Kind": 3
    },
    {
      "EndIndex": 14631,
      "Kind": 3
    },
    {
      "EndIndex": 14664,
      "Kind": 3
    },
    {
      "EndIndex": 14712,
      "Kind": 3
    },
    {
      "EndIndex": 14788,
      "Kind": 3
    },
    {
      "EndIndex": 14809,
      "Kind": 3
    },
    {
      "EndIndex": 14847,
      "Kind": 3
    },
    {
      "EndIndex": 14907,
      "Kind": 3
    },
    {
      "EndIndex": 14954,
      "Kind": 3
    },
    {
      "EndIndex": 14983,
      "Kind": 3
    },
    {
      "EndIndex": 15004,
      "Kind": 3
    },
    {
      "EndIndex": 15036,
      "Kind": 3
    },
    {
      "EndIndex": 15088,
      "Kind": 3
    },
    {
      "EndIndex": 15103,
      "Kind": 3
    },
    {
      "EndIndex": 15124,
      "Kind": 3
    },
    {
      "EndIndex": 15149,
      "Kind": 3
    },
    {
      "EndIndex": 15172,
      "Kind": 3
    },
    {
      "EndIndex": 15195,
      "Kind": 3
    },
    {
      "EndIndex": 15220,
      "Kind": 3
    },
    {
      "EndIndex": 15244,
      "Kind": 3
    },
    {
      "EndIndex": 15267,
      "Kind": 3
    },
    {
      "EndIndex": 15320,
      "Kind": 3
    },
    {
      "EndIndex": 15354,
      "Kind": 3
    },
    {
      "EndIndex": 15386,
      "Kind": 3
    },
    {
      "EndIndex": 15436,
      "Kind": 3
    },
    {
      "EndIndex": 15472,
      "Kind": 3
    },
    {
      "EndIndex": 15504,
      "Kind": 3
    },
    {
      "EndIndex": 15523,
      "Kind": 3
    },
    {
      "EndIndex": 15558,
      "Kind": 3
    }
  ],
  "FileSize": 15558,
  "Id": -1838780341,
  "Name": "re",
  "IndexSpan": null
}