{
  "Functions": [
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "__breakpointhook__",
      "Documentation": "breakpointhook(*args, **kws)\n\nThis hook function is called by built-in breakpoint().\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "__displayhook__",
      "Documentation": "displayhook(object) -> None\n\nPrint an object to sys.stdout and also save it in builtins._\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "__excepthook__",
      "Documentation": "excepthook(exctype, value, traceback) -> None\n\nHandle an exception by displaying it with a traceback on sys.stderr.\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "__interactivehook__",
      "Documentation": null
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "_clear_type_cache",
      "Documentation": "_clear_type_cache() -> None\nClear the internal type lookup cache."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:builtins(3.7).dict"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "_current_frames",
      "Documentation": "_current_frames() -> dictionary\n\nReturn a dictionary mapping each current thread T's thread id to T's\ncurrent stack frame.\n\nThis function should be used for specialized purposes only."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "_debugmallocstats",
      "Documentation": "_debugmallocstats()\n\nPrint summary info to stderr about the state of\npymalloc's structures.\n\nIn Py_DEBUG mode, also perform some expensive internal consistency\nchecks.\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "_enablelegacywindowsfsencoding",
      "Documentation": "_enablelegacywindowsfsencoding()\n\nChanges the default filesystem encoding to mbcs:replace for consistency\nwith earlier versions of Python. See PEP 529 for more information.\n\nThis is equivalent to defining the PYTHONLEGACYWINDOWSFSENCODING \nenvironment variable before launching Python."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "depth",
              "Type": "int",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:types.FrameType"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "_getframe",
      "Documentation": "_getframe([depth]) -> frameobject\n\nReturn a frame object from the call stack.  If optional integer depth is\ngiven, return the frame object that many calls below the top of the stack.\nIf that is deeper than the call stack, ValueError is raised.  The default\nfor depth is zero, returning the frame at the top of the call stack.\n\nThis function should be used for internal and specialized\npurposes only."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "args",
              "Type": null,
              "DefaultValue": null,
              "Kind": 1
            },
            {
              "Name": "kws",
              "Type": null,
              "DefaultValue": null,
              "Kind": 2
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "breakpointhook",
      "Documentation": "breakpointhook(*args, **kws)\n\nThis hook function is called by built-in breakpoint().\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "fn",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "args",
              "Type": "typing.Any",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:typing._T"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "call_tracing",
      "Documentation": "call_tracing(func, args) -> object\n\nCall func(*args), while tracing is enabled.  The tracing state is\nsaved, and restored afterwards.  This is intended to be called from\na debugger from a checkpoint, to recursively debug some other code."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "callstats",
      "Documentation": "callstats() -> tuple of integers\n\nReturn a tuple of function call statistics, if CALL_PROFILE was defined\nwhen Python was built.  Otherwise, return None.\n\nWhen enabled, this function returns detailed, implementation-specific\ndetails about the number of function calls executed. The return value is\na 11-tuple where the entries in the tuple are counts of:\n0. all function calls\n1. calls to PyFunction_Type objects\n2. PyFunction calls that do not create an argument tuple\n3. PyFunction calls that do not create an argument tuple\n   and bypass PyEval_EvalCodeEx()\n4. PyMethod calls\n5. PyMethod calls on bound methods\n6. PyType calls\n7. PyCFunction calls\n8. generator calls\n9. All other calls\n10. Number of stack pops performed by call_function()"
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "value",
              "Type": "int",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "displayhook",
      "Documentation": "displayhook(object) -> None\n\nPrint an object to sys.stdout and also save it in builtins._\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:builtins(3.7).tuple"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "exc_info",
      "Documentation": "exc_info() -> (type, value, traceback)\n\nReturn information about the most recent exception caught by an except\nclause in the current stack frame or in an older stack frame."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "type_",
              "Type": "typing.Type[builtins(3.7).BaseException]",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "value",
              "Type": "BaseException",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "traceback",
              "Type": "types.TracebackType",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "excepthook",
      "Documentation": "excepthook(exctype, value, traceback) -> None\n\nHandle an exception by displaying it with a traceback on sys.stderr.\n"
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "arg",
              "Type": "object",
              "DefaultValue": "i:...",
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "exit",
      "Documentation": "exit([status])\n\nExit the interpreter by raising SystemExit(status).\nIf the status is omitted or None, it defaults to zero (i.e., success).\nIf the status is an integer, it will be used as the system exit status.\nIf it is another kind of object, it will be printed and the system\nexit status will be one (i.e., failure)."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "get_asyncgen_hooks",
      "Documentation": "get_asyncgen_hooks()\n\nReturn a namedtuple of installed asynchronous generators hooks (firstiter, finalizer)."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "get_coroutine_origin_tracking_depth",
      "Documentation": "Check status of origin tracking for coroutine objects in this thread."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "get_coroutine_wrapper",
      "Documentation": "get_coroutine_wrapper()\n\nReturn the wrapper for coroutine objects set by sys.set_coroutine_wrapper."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:int"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getallocatedblocks",
      "Documentation": "getallocatedblocks() -> integer\n\nReturn the number of memory blocks currently allocated, regardless of their\nsize."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:int"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getcheckinterval",
      "Documentation": "getcheckinterval() -> current check interval; see setcheckinterval()."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getdefaultencoding",
      "Documentation": "getdefaultencoding() -> string\n\nReturn the current default string encoding used by the Unicode \nimplementation."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getfilesystemencodeerrors",
      "Documentation": "getfilesystemencodeerrors() -> string\n\nReturn the error mode used to convert Unicode filenames in\noperating system filenames."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getfilesystemencoding",
      "Documentation": "getfilesystemencoding() -> string\n\nReturn the encoding used to convert Unicode filenames in\noperating system filenames."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getprofile",
      "Documentation": "getprofile()\n\nReturn the profiling function set with sys.setprofile.\nSee the profiler chapter in the library manual."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:int"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getrecursionlimit",
      "Documentation": "getrecursionlimit()\n\nReturn the current value of the recursion limit, the maximum depth\nof the Python interpreter stack.  This limit prevents infinite\nrecursion from causing an overflow of the C stack and crashing Python."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "arg",
              "Type": "typing.Any",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:int"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getrefcount",
      "Documentation": "getrefcount(object) -> integer\n\nReturn the reference count of object.  The count returned is generally\none higher than you might expect, because it includes the (temporary)\nreference as an argument to getrefcount()."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "obj",
              "Type": "object",
              "DefaultValue": null,
              "Kind": 0
            },
            {
              "Name": "default",
              "Type": "int",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:int"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getsizeof",
      "Documentation": "getsizeof(object, default) -> int\n\nReturn the size of object in bytes."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:float"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getswitchinterval",
      "Documentation": "getswitchinterval() -> current thread switch interval; see setswitchinterval()."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "gettrace",
      "Documentation": "gettrace()\n\nReturn the global debug tracing function set with sys.settrace.\nSee the debugger chapter in the library manual."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:sys._WinVersion"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "getwindowsversion",
      "Documentation": "getwindowsversion()\n\nReturn information about the running version of Windows as a named tuple.\nThe members are named: major, minor, build, platform, service_pack,\nservice_pack_major, service_pack_minor, suite_mask, and product_type. For\nbackward compatibility, only the first 5 items are available by indexing.\nAll elements are numbers, except service_pack and platform_type which are\nstrings, and platform_version which is a 3-tuple. Platform is always 2.\nProduct_type may be 1 for a workstation, 2 for a domain controller, 3 for a\nserver. Platform_version is a 3-tuple containing a version number that is\nintended for identifying the OS rather than feature detection."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "string",
              "Type": "str",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:str"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "intern",
      "Documentation": "intern(string) -> string\n\n``Intern'' the given string.  This enters the string in the (global)\ntable of interned strings whose purpose is to speed up dictionary lookups.\nReturn the string itself or the previously interned string object with the\nsame value."
    },
    {
      "Overloads": [
        {
          "Parameters": [],
          "ReturnType": "i:bool"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "is_finalizing",
      "Documentation": "is_finalizing()\nReturn True if Python is exiting."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "",
              "Type": null,
              "DefaultValue": null,
              "Kind": 1
            },
            {
              "Name": "firstiter",
              "Type": null,
              "DefaultValue": null,
              "Kind": 3
            },
            {
              "Name": "finalizer",
              "Type": null,
              "DefaultValue": null,
              "Kind": 3
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "set_asyncgen_hooks",
      "Documentation": "set_asyncgen_hooks(*, firstiter=None, finalizer=None)\n\nSet a finalizer for async generators objects."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "depth",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "set_coroutine_origin_tracking_depth",
      "Documentation": "Enable or disable origin tracking for coroutine objects in this thread.\n\nCoroutine objects will track 'depth' frames of traceback information about\nwhere they came from, available in their cr_origin attribute. Set depth of 0\nto disable."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "wrapper",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": null
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "set_coroutine_wrapper",
      "Documentation": "set_coroutine_wrapper(wrapper)\n\nSet a wrapper for coroutine objects."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "interval",
              "Type": "int",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "setcheckinterval",
      "Documentation": "setcheckinterval(n)\n\nTell the Python interpreter to check for asynchronous events every\nn instructions.  This also affects how often thread switches occur."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "profilefunc",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "setprofile",
      "Documentation": "setprofile(function)\n\nSet the profiling function.  It will be called on each function call\nand return.  See the profiler chapter in the library manual."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "limit",
              "Type": "int",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "setrecursionlimit",
      "Documentation": "setrecursionlimit(n)\n\nSet the maximum depth of the Python interpreter stack to n.  This\nlimit prevents infinite recursion from causing an overflow of the C\nstack and crashing Python.  The highest possible limit is platform-\ndependent."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "interval",
              "Type": "float",
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "setswitchinterval",
      "Documentation": "setswitchinterval(n)\n\nSet the ideal thread switching delay inside the Python interpreter\nThe actual frequency of switching threads can be lower if the\ninterpreter executes long sequences of uninterruptible code\n(this is implementation-specific and workload-dependent).\n\nThe parameter must represent the desired switching delay in seconds\nA typical value is 0.005 (5 milliseconds)."
    },
    {
      "Overloads": [
        {
          "Parameters": [
            {
              "Name": "tracefunc",
              "Type": null,
              "DefaultValue": null,
              "Kind": 0
            }
          ],
          "ReturnType": "i:__NoneType__"
        }
      ],
      "Attributes": 0,
      "Classes": null,
      "Functions": null,
      "Name": "settrace",
      "Documentation": "settrace(function)\n\nSet the global debug tracing function.  It will be called on each\nfunction call.  See the debugger chapter in the library manual."
    }
  ],
  "Variables": [],
  "Classes": [
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "flags",
      "Documentation": "sys.flags\n\nFlags provided through command line arguments or environment vars."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__float_info",
      "Documentation": "sys.float_info\n\nA structseq holding information about the float type. It contains low level\ninformation about the precision and internal representation. Please study\nyour system's :file:`float.h` for more information."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__hash_info",
      "Documentation": "hash_info\n\nA struct sequence providing parameters used for computing\nhashes. The attributes are read only."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__int_info",
      "Documentation": "sys.int_info\n\nA struct sequence that holds information about Python's\ninternal representation of integers.  The attributes are read only."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__thread_info",
      "Documentation": "sys.thread_info\n\nA struct sequence holding information about the thread implementation."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__version_info",
      "Documentation": "sys.version_info\n\nVersion information as a named tuple."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__float_info",
      "Documentation": "sys.float_info\n\nA structseq holding information about the float type. It contains low level\ninformation about the precision and internal representation. Please study\nyour system's :file:`float.h` for more information."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__hash_info",
      "Documentation": "hash_info\n\nA struct sequence providing parameters used for computing\nhashes. The attributes are read only."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__int_info",
      "Documentation": "sys.int_info\n\nA struct sequence that holds information about Python's\ninternal representation of integers.  The attributes are read only."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__thread_info",
      "Documentation": "sys.thread_info\n\nA struct sequence holding information about the thread implementation."
    },
    {
      "Bases": [
        "tuple",
        "object"
      ],
      "Methods": [],
      "Properties": [],
      "Fields": [],
      "GenericParameters": null,
      "InnerClasses": [],
      "Name": "__version_info",
      "Documentation": "sys.version_info\n\nVersion information as a named tuple."
    }
  ],
  "Name": "sys",
  "Documentation": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a struct sequence with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a struct sequence with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a struct sequence with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a struct sequence with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\ndllhandle -- [Windows only] integer handle of the Python DLL\nwinver -- [Windows only] version number of the Python DLL\n_enablelegacywindowsfsencoding -- [Windows only] \n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function\n"
}