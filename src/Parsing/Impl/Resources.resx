<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AsRequiresPython2dot6OrlaterErrorMsg" xml:space="preserve">
    <value>'as' requires Python 2.6 or later</value>
  </data>
  <data name="BackslashFStringExpressionErrorMsg" xml:space="preserve">
    <value>f-string expression part cannot include a backslash</value>
  </data>
  <data name="BreakOustideLoopErrorMsg" xml:space="preserve">
    <value>'break' outside loop</value>
  </data>
  <data name="CantUseStarredExpErrorMsg" xml:space="preserve">
    <value>can't use starred expression here</value>
  </data>
  <data name="ClassDecoratorsRequireTwodotSixErrorMsg" xml:space="preserve">
    <value>invalid syntax, class decorators require 2.6 or later.</value>
  </data>
  <data name="ClosingParensNotMatchFStringErrorMsg" xml:space="preserve">
    <value>f-string: closing parenthesis '{0}' does not match opening parenthesis '{1}'</value>
  </data>
  <data name="ContinueNotInLoopErrorMsg" xml:space="preserve">
    <value>'continue' not properly in loop</value>
  </data>
  <data name="ContinueNotSupportedInsideFinallyErrorMsg" xml:space="preserve">
    <value>'continue' not supported inside 'finally' clause</value>
  </data>
  <data name="DefaultExceptMustBeLastErrorMsg" xml:space="preserve">
    <value>default 'except' must be last</value>
  </data>
  <data name="DefaultValueMustBeSpecifiedErrorMsg" xml:space="preserve">
    <value>default value must be specified here</value>
  </data>
  <data name="DuplicateArgsDoubleArgumentErrorMsg" xml:space="preserve">
    <value>duplicate ** args arguments</value>
  </data>
  <data name="DuplicateArgsSingleArgumentErrorMsg" xml:space="preserve">
    <value>duplicate * args arguments</value>
  </data>
  <data name="DuplicateArgumentInFunctionDefinitionErrorMsg" xml:space="preserve">
    <value>duplicate argument '{0}' in function definition</value>
  </data>
  <data name="DuplicateArgumentInFunctionErrorMsg" xml:space="preserve">
    <value>duplicate argument '{0}' in function definition</value>
  </data>
  <data name="DuplicateKeywordArgumentErrorMsg" xml:space="preserve">
    <value>duplicate keyword argument</value>
  </data>
  <data name="EmptyExpressionFStringErrorMsg" xml:space="preserve">
    <value>f-string: empty expression not allowed</value>
  </data>
  <data name="ExpectedColonErrorMsg" xml:space="preserve">
    <value>expected ':'</value>
  </data>
  <data name="ExpectedExpressionAfterDelErrorMsg" xml:space="preserve">
    <value>expected expression after del</value>
  </data>
  <data name="ExpectedExpressionToBePrintedErrorMsg" xml:space="preserve">
    <value>print statement expected expression to be printed</value>
  </data>
  <data name="ExpectedIndentedBlockErrorMsg" xml:space="preserve">
    <value>expected an indented block</value>
  </data>
  <data name="ExpectedNameErrorMsg" xml:space="preserve">
    <value>expected name</value>
  </data>
  <data name="ExpectingCharButFoundFStringErrorMsg" xml:space="preserve">
    <value>f-string: expecting '{0}' but found '{1}'</value>
  </data>
  <data name="ExpectingCharFStringErrorMsg" xml:space="preserve">
    <value>f-string: expecting '{0}'</value>
  </data>
  <data name="FromCauseNotAllowedIn2XErrorMsg" xml:space="preserve">
    <value>invalid syntax, from cause not allowed in 2.x.</value>
  </data>
  <data name="FutureFeatureNotDefinedErrorMsg" xml:space="preserve">
    <value>future feature is not defined: </value>
  </data>
  <data name="FutureImportsMustOccorAtBeginningOfFileErrorMsg" xml:space="preserve">
    <value>from __future__ imports must occur at the beginning of the file</value>
  </data>
  <data name="FutureStatementDoesNotSupportImportErrorMsg" xml:space="preserve">
    <value>future statement does not support import *</value>
  </data>
  <data name="IllegalTargetAnnotationErrorMsg" xml:space="preserve">
    <value>illegal target for annotation</value>
  </data>
  <data name="ImportOnlyAllowedAtModuleErrorMsg" xml:space="preserve">
    <value>import * only allowed at module level</value>
  </data>
  <data name="IncorrectStartLocationErrorMsg" xml:space="preserve">
    <value>Start location was not set correctly</value>
  </data>
  <data name="InvalidConversionCharacterExpectedFStringErrorMsg" xml:space="preserve">
    <value>f-string: invalid conversion character: {0} expected 's', 'r', or 'a'</value>
  </data>
  <data name="InvalidConversionCharacterFStringErrorMsg" xml:space="preserve">
    <value>f-string: invalid conversion character: expected 's', 'r', or 'a'</value>
  </data>
  <data name="InvalidExpressionFStringErrorMsg" xml:space="preserve">
    <value>f-string: invalid expression</value>
  </data>
  <data name="InvalidParameterErrorMsg" xml:space="preserve">
    <value>invalid parameter</value>
  </data>
  <data name="InvalidSublistParameterErrorMsg" xml:space="preserve">
    <value>invalid sublist parameter</value>
  </data>
  <data name="InvalidSyntaxAllowedInVersion3XErrorMsg" xml:space="preserve">
    <value>invalid syntax, only exception value is allowed in 3.x.</value>
  </data>
  <data name="InvalidSyntaxErrorMsg" xml:space="preserve">
    <value>invalid syntax</value>
  </data>
  <data name="IterableArgumentFollowsKeywordArgumentErrorMsg" xml:space="preserve">
    <value>iterable argument unpacking follows keyword argument unpacking</value>
  </data>
  <data name="IterableUnpackingErrorMsg" xml:space="preserve">
    <value>iterable unpacking cannot be used in comprehension</value>
  </data>
  <data name="KeywordsMustComeBeforeArgsErrorMsg" xml:space="preserve">
    <value>keywords must come before ** args</value>
  </data>
  <data name="LambdaParenthesesFstringErrorMsg" xml:space="preserve">
    <value>f-string: lambda must be inside parentheses</value>
  </data>
  <data name="MisplacedYieldErrorMsg" xml:space="preserve">
    <value>misplaced yield</value>
  </data>
  <data name="MissingModuleNameErrorMsg" xml:space="preserve">
    <value>missing module name</value>
  </data>
  <data name="MixingBytesAndNonBytesErrorMsg" xml:space="preserve">
    <value>cannot mix bytes and nonbytes literals</value>
  </data>
  <data name="NamedArgumentsMustFollowBareErrorMsg" xml:space="preserve">
    <value>named arguments must follow bare *</value>
  </data>
  <data name="NamedAssignmentWithErrorMsg" xml:space="preserve">
    <value>Cannot use named assignment with {0}</value>
  </data>
  <data name="NamedExpressionCtxtErrorMsg" xml:space="preserve">
    <value>Named expression must be parenthesized in this context</value>
  </data>
  <data name="NonKeywordArgAfterKeywordArgErrorMsg" xml:space="preserve">
    <value>non-keyword arg after keyword arg</value>
  </data>
  <data name="NonLocalDeclarationAtModuleErrorMsg" xml:space="preserve">
    <value>nonlocal declaration not allowed at module level</value>
  </data>
  <data name="NotAChanceErrorMsg" xml:space="preserve">
    <value>not a chance</value>
  </data>
  <data name="NumberSignFStringExpressionErrorMsg" xml:space="preserve">
    <value>f-string expression part cannot include '#'</value>
  </data>
  <data name="OnlyOneAllowedDoubleErrorMsg" xml:space="preserve">
    <value>only one ** allowed</value>
  </data>
  <data name="OnlyOneAllowedSingleErrorMsg" xml:space="preserve">
    <value>only one * allowed</value>
  </data>
  <data name="ParameterAnnotationsRequire3dotXErrorMsg" xml:space="preserve">
    <value>invalid syntax, parameter annotations require 3.x</value>
  </data>
  <data name="ParsingAlreadyStartedErrorMsg" xml:space="preserve">
    <value>Parsing already started. Use Restart to start again.</value>
  </data>
  <data name="PositionalArgumentKeywardArgumentErrorMsg" xml:space="preserve">
    <value>positional argument follows keyword argument</value>
  </data>
  <data name="PositionalArgumentKeywardArgumentUnpackingErrorMsg" xml:space="preserve">
    <value>positional argument follows keyword argument unpacking</value>
  </data>
  <data name="PositionalParameterNotAllowedErrorMsg" xml:space="preserve">
    <value>positional parameter after * args not allowed</value>
  </data>
  <data name="ReturnAnnotationsRequire3dotXErrorMsg" xml:space="preserve">
    <value>invalid syntax, return annotations require 3.x</value>
  </data>
  <data name="ReturnOutsideFunctionErrorMsg" xml:space="preserve">
    <value>'return' outside function</value>
  </data>
  <data name="ReturnWithArgumentInGeneratorErrorMsg" xml:space="preserve">
    <value>'return' with argument inside generator</value>
  </data>
  <data name="SetLiteralsRequirePython2dot7ErrorMsg" xml:space="preserve">
    <value>invalid syntax, set literals require Python 2.7 or later.</value>
  </data>
  <data name="SingleClosedBraceFStringErrorMsg" xml:space="preserve">
    <value>f-string: single '}' is not allowed</value>
  </data>
  <data name="SingleTargetCanBeAnnotatedErrorMsg" xml:space="preserve">
    <value>only single target (not tuple) can be annotated</value>
  </data>
  <data name="SublistParametersNotSupported3dotXErrorMsg" xml:space="preserve">
    <value>sublist parameters are not supported in 3.x</value>
  </data>
  <data name="SyntaxErrorMsg" xml:space="preserve">
    <value>syntax error</value>
  </data>
  <data name="TwoStarredExpressionErrorMsg" xml:space="preserve">
    <value>two starred expressions in assignment</value>
  </data>
  <data name="UnexpectedEndOfFileErrorMsg" xml:space="preserve">
    <value>unexpected end of file</value>
  </data>
  <data name="UnexpectedEndOfFileWhileParsingErrorMsg" xml:space="preserve">
    <value>unexpected EOF while parsing</value>
  </data>
  <data name="UnexpectedIndentErrorMsg" xml:space="preserve">
    <value>unexpected indent</value>
  </data>
  <data name="UnexpectedTokenErrorMsg" xml:space="preserve">
    <value>unexpected token '{0}'</value>
  </data>
  <data name="UnhandledStringTokenErrorMsg" xml:space="preserve">
    <value>Unhandled string token</value>
  </data>
  <data name="UnknownEncodingErrorMsg" xml:space="preserve">
    <value>encoding problem: unknown encoding (line {0})</value>
  </data>
  <data name="UnmatchedFStringErrorMsg" xml:space="preserve">
    <value>f-string: unmatched '{0}'</value>
  </data>
  <data name="Utf8EncodingErrorMsg" xml:space="preserve">
    <value>file has both Unicode marker and PEP-263 file encoding.  You must use \"utf-8\" as the encoding name when a BOM is present.</value>
  </data>
  <data name="VariableIn3dotXErrorMsg" xml:space="preserve">
    <value>", variable" not allowed in 3.x - use "as variable" instead.</value>
  </data>
  <data name="YieldInsideAsyncErrorMsg" xml:space="preserve">
    <value>'yield' inside async function</value>
  </data>
</root>